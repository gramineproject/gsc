{% extends "Dockerfile.common.build.template" %}

{% block install %}
# Combine all installation and removal steps in a single RUN command to reduce the final image size.
# This is because each Dockerfile command creates a new layer which necessarily adds size to the
# final image. This trick allows to decrease the image size by hundreds of MBs.
COPY RPM-GPG-KEY-CentOS-Official /

{% set distro = Distro.split(':') %}
{% set pkg_manager = 'dnf' %}
{% if distro[0] == "redhat/ubi8" %}
    RUN dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm \
        && dnf update -y

    RUN rpm --import /RPM-GPG-KEY-CentOS-Official \
        && dnf config-manager --add-repo http://vault.centos.org/centos/8/BaseOS/x86_64/os \
        && dnf config-manager --add-repo http://vault.centos.org/centos/8/AppStream/x86_64/os
{% else %}
    {% set pkg_manager = 'microdnf' %}
    RUN  rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

    RUN echo "[CentOSBaseOS]" >> /etc/yum.repos.d/ubi.repo \
        && echo "name=CentOSBaseOS" >> /etc/yum.repos.d/ubi.repo \
        && echo "baseurl=http://vault.centos.org/centos/8/BaseOS/x86_64/os" >> /etc/yum.repos.d/ubi.repo \
        && echo "enabled=1" >> /etc/yum.repos.d/ubi.repo \
        && echo "gpgcheck=1" >> /etc/yum.repos.d/ubi.repo \
        && echo "gpgkey=file:///RPM-GPG-KEY-CentOS-Official" >> /etc/yum.repos.d/ubi.repo

    RUN echo "[CentOSAppStream]" >> /etc/yum.repos.d/ubi.repo \
        && echo "name=CentOSAppStream" >> /etc/yum.repos.d/ubi.repo \
        && echo "baseurl=http://vault.centos.org/centos/8/AppStream/x86_64/os" >> /etc/yum.repos.d/ubi.repo \
        && echo "enabled=1" >> /etc/yum.repos.d/ubi.repo \
        && echo "gpgcheck=1" >> /etc/yum.repos.d/ubi.repo \
        && echo "gpgkey=file:///RPM-GPG-KEY-CentOS-Official" >> /etc/yum.repos.d/ubi.repo
{% endif %}

RUN {{ pkg_manager }} update -y \
    &&  {{ pkg_manager }} install -y \
        binutils \
        wget \
        pkgconfig \
        expect \
        openssl \
        protobuf-c-devel \
        python3 \
        python3-cryptography \
        python3-pip \
        python3-protobuf \
        {% if distro[0] == "redhat/ubi8-minimal" %} \
            findutils \
            which \
        {% endif %} \
    && /usr/bin/python3 -B -m pip install click jinja2 protobuf \
                                          'tomli>=1.1.0' 'tomli-w>=0.4.0' \
    && {{ pkg_manager }} repolist \
# Install pyelftools after the installation of epel-release as it is provided by the EPEL repo
    && {{ pkg_manager }} install -y python3-pyelftools \
    && {{ pkg_manager }} -y clean all

{% if buildtype != "release" %}
RUN {{ pkg_manager }} install -y \
        gdb \
        less \
        libunwind \
        python3-pytest \
        strace
{% endif %}
{% endblock %}
