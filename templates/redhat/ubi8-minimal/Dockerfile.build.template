{% extends "Dockerfile.common.build.template" %}

{% block install %}
# Combine all installation and removal steps in a single RUN command to reduce the final image size.
# This is because each Dockerfile command creates a new layer which necessarily adds size to the
# final image. This trick allow to decrease the image size by hundreds of MBs.
COPY RPM-GPG-KEY-CentOS-Official /

RUN rpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

RUN echo -e "[CentOSBaseOS] \n\
name=CentOSBaseOS \n\
baseurl=http://vault.centos.org/centos/8/BaseOS/x86_64/os \n\
enabled=1 \n\
gpgcheck=1 \n\
gpgkey=file:///RPM-GPG-KEY-CentOS-Official" >> /etc/yum.repos.d/ubi.repo

RUN echo -e "[CentOSAppStream] \n\
name=CentOSAppStream \n\
baseurl=http://vault.centos.org/centos/8/AppStream/x86_64/os \n\
enabled=1 \n\
gpgcheck=1 \n\
gpgkey=file:///RPM-GPG-KEY-CentOS-Official" >> /etc/yum.repos.d/ubi.repo

RUN microdnf update -y \
    &&  microdnf install -y \
        binutils \
        expect \
        findutils \
        openssl \
        pkgconfig \
        protobuf-c-devel \
        python3 \
        python3-cryptography \
        python3-pip \
        python3-protobuf \
        python3-pyelftools \
        wget \
        which \
    && /usr/bin/python3 -B -m pip install click jinja2 \
                                          'tomli>=1.1.0' 'tomli-w>=0.4.0' \
    && microdnf repolist \
    && microdnf -y clean all

{% if buildtype != "release" %}
RUN microdnf install -y \
        gdb \
        less \
        libunwind \
        python3-pytest \
        strace
{% endif %}
{% endblock %}
